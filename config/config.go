package config

import (
	"fmt"
	"os"
	"strconv"
	"sync"

	"github.com/joho/godotenv"
)

var (
	once   sync.Once
	config *Config
	err    error
)

var msg = []byte{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 45, 45, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 44, 45, 46, 45, 45, 45, 45, 46, 32, 32, 32, 44, 45, 45, 45, 46, 39, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 45, 45, 45, 45, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 45, 45, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 92, 32, 32, 32, 32, 47, 32, 32, 92, 32, 32, 124, 32, 32, 32, 124, 32, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 45, 45, 46, 45, 45, 46, 32, 32, 32, 32, 32, 32, 47, 32, 32, 32, 47, 32, 32, 32, 92, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 45, 45, 46, 39, 124, 32, 32, 32, 32, 44, 45, 45, 45, 44, 46, 32, 10, 124, 32, 32, 32, 58, 32, 32, 32, 32, 92, 32, 58, 32, 32, 32, 58, 32, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 45, 45, 44, 32, 47, 32, 32, 47, 32, 32, 32, 32, 39, 46, 32, 32, 32, 47, 32, 32, 32, 46, 32, 32, 32, 32, 32, 58, 32, 32, 32, 32, 44, 45, 45, 44, 58, 32, 32, 58, 32, 124, 32, 32, 44, 39, 32, 32, 46, 39, 32, 124, 32, 10, 124, 32, 32, 32, 124, 32, 32, 46, 92, 32, 58, 124, 32, 32, 32, 39, 32, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 39, 95, 32, 47, 124, 124, 32, 32, 58, 32, 32, 47, 96, 46, 32, 47, 32, 32, 46, 32, 32, 32, 47, 32, 32, 32, 59, 46, 32, 32, 92, 44, 96, 45, 45, 46, 39, 96, 124, 32, 32, 39, 32, 58, 44, 45, 45, 45, 46, 39, 32, 32, 32, 124, 32, 10, 46, 32, 32, 32, 58, 32, 32, 124, 58, 32, 124, 59, 32, 32, 32, 59, 32, 39, 32, 32, 32, 32, 32, 46, 45, 45, 46, 32, 124, 32, 32, 124, 32, 58, 59, 32, 32, 124, 32, 32, 124, 45, 45, 96, 32, 32, 46, 32, 32, 32, 59, 32, 32, 32, 47, 32, 32, 96, 32, 59, 124, 32, 32, 32, 58, 32, 32, 58, 32, 32, 124, 32, 124, 124, 32, 32, 32, 124, 32, 32, 32, 46, 39, 32, 10, 124, 32, 32, 32, 124, 32, 32, 32, 92, 32, 58, 39, 32, 32, 32, 124, 32, 124, 95, 95, 32, 44, 39, 95, 32, 47, 124, 32, 58, 32, 32, 46, 32, 124, 124, 32, 32, 58, 32, 32, 59, 95, 32, 32, 32, 32, 59, 32, 32, 32, 124, 32, 32, 59, 32, 92, 32, 59, 32, 124, 58, 32, 32, 32, 124, 32, 32, 32, 92, 32, 124, 32, 58, 58, 32, 32, 32, 58, 32, 32, 124, 45, 44, 32, 10, 124, 32, 32, 32, 58, 32, 46, 32, 32, 32, 47, 124, 32, 32, 32, 124, 32, 58, 46, 39, 124, 124, 32, 32, 39, 32, 124, 32, 124, 32, 32, 46, 32, 46, 32, 92, 32, 32, 92, 32, 32, 32, 32, 96, 46, 32, 124, 32, 32, 32, 58, 32, 32, 124, 32, 59, 32, 124, 32, 39, 124, 32, 32, 32, 58, 32, 39, 32, 32, 39, 59, 32, 124, 58, 32, 32, 32, 124, 32, 32, 59, 47, 124, 32, 10, 59, 32, 32, 32, 124, 32, 124, 96, 45, 39, 32, 39, 32, 32, 32, 58, 32, 32, 32, 32, 59, 124, 32, 32, 124, 32, 39, 32, 124, 32, 32, 124, 32, 124, 32, 32, 96, 45, 45, 45, 45, 46, 32, 32, 32, 92, 46, 32, 32, 32, 124, 32, 32, 39, 32, 39, 32, 39, 32, 58, 39, 32, 32, 32, 39, 32, 59, 46, 32, 32, 32, 32, 59, 124, 32, 32, 32, 58, 32, 32, 32, 46, 39, 32, 10, 124, 32, 32, 32, 124, 32, 59, 32, 32, 32, 32, 124, 32, 32, 32, 124, 32, 32, 46, 47, 32, 58, 32, 32, 124, 32, 124, 32, 58, 32, 32, 39, 32, 59, 32, 32, 95, 95, 32, 92, 32, 32, 92, 32, 32, 124, 39, 32, 32, 32, 59, 32, 32, 92, 59, 32, 47, 32, 32, 124, 124, 32, 32, 32, 124, 32, 124, 32, 92, 32, 32, 32, 124, 124, 32, 32, 32, 124, 32, 32, 124, 45, 44, 32, 10, 58, 32, 32, 32, 39, 32, 124, 32, 32, 32, 32, 59, 32, 32, 32, 58, 32, 59, 32, 32, 32, 124, 32, 32, 59, 32, 39, 32, 124, 32, 32, 124, 32, 39, 32, 47, 32, 32, 47, 96, 45, 45, 39, 32, 32, 47, 32, 92, 32, 32, 32, 92, 32, 32, 39, 44, 32, 32, 47, 32, 39, 32, 32, 32, 58, 32, 124, 32, 32, 59, 32, 46, 39, 39, 32, 32, 32, 58, 32, 32, 59, 47, 124, 32, 10, 58, 32, 32, 32, 58, 32, 58, 32, 32, 32, 32, 124, 32, 32, 32, 44, 47, 32, 32, 32, 32, 58, 32, 32, 124, 32, 58, 32, 59, 32, 32, 59, 32, 124, 39, 45, 45, 39, 46, 32, 32, 32, 32, 32, 47, 32, 32, 32, 59, 32, 32, 32, 58, 32, 32, 32, 32, 47, 32, 32, 124, 32, 32, 32, 124, 32, 39, 96, 45, 45, 39, 32, 32, 124, 32, 32, 32, 124, 32, 32, 32, 32, 92, 32, 10, 124, 32, 32, 32, 124, 32, 58, 32, 32, 32, 32, 39, 45, 45, 45, 39, 32, 32, 32, 32, 32, 39, 32, 32, 58, 32, 32, 96, 45, 45, 39, 32, 32, 32, 92, 32, 96, 45, 45, 39, 45, 45, 45, 39, 32, 32, 32, 32, 32, 92, 32, 32, 32, 92, 32, 46, 39, 32, 32, 32, 39, 32, 32, 32, 58, 32, 124, 32, 32, 32, 32, 32, 32, 124, 32, 32, 32, 58, 32, 32, 32, 46, 39, 32, 10, 96, 45, 45, 45, 39, 46, 124, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58, 32, 32, 44, 32, 32, 32, 32, 32, 32, 46, 45, 46, 47, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 45, 45, 45, 96, 32, 32, 32, 32, 32, 59, 32, 32, 32, 124, 46, 39, 32, 32, 32, 32, 32, 32, 124, 32, 32, 32, 124, 32, 44, 39, 32, 32, 32, 10, 32, 32, 96, 45, 45, 45, 96, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 45, 45, 96, 45, 45, 45, 45, 39, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 39, 45, 45, 45, 39, 32, 32, 32, 32, 32, 32, 32, 32, 96, 45, 45, 45, 45, 39, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}

// Config 应用配置
type Config struct {
	DBType        string
	DBSource      string
	JWTSecret     string
	ServerPort    string
	DBLogLevel    string // "silent", "info", "warn", "error"
	RedisAddr     string
	RedisPassword string
	RedisDB       int
}

// LoadConfig 从环境变量加载配置
func LoadConfig() (*Config, error) {
	once.Do(func() {
		// 加载.env文件
		_ = godotenv.Load()

		println(fmt.Sprintf("%c[%d;%d;%dm%s%c[0m", 0x1B, 0, 0, 31, msg, 0x1B))

		var redisDB int
		redisDB, err = strconv.Atoi(getEnv("REDIS_DB", "0"))
		if err != nil {
			err = fmt.Errorf("invalid REDIS_DB: %w", err)
			return
		}

		config = &Config{
			DBType:        getEnv("DB_TYPE", "sqlite"), // mysql 或 sqlite
			DBSource:      getEnv("DB_SOURCE", "oneplusone.db"),
			JWTSecret:     getEnv("JWT_SECRET", "your_jwt_secret_key"),
			ServerPort:    getEnv("SERVER_PORT", "8080"),
			DBLogLevel:    getEnv("DB_LOG_LEVEL", "info"),
			RedisAddr:     getEnv("REDIS_ADDR", "localhost:6379"),
			RedisPassword: getEnv("REDIS_PASSWORD", ""),
			RedisDB:       redisDB,
		}
	})

	return config, err
}

// getEnv 获取环境变量，如果不存在则返回默认值
func getEnv(key, defaultValue string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return defaultValue
}
